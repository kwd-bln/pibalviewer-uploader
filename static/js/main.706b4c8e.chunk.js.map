{"version":3,"sources":["components/TopPage.tsx","utils/parser.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TopPage","props","state","subject","body","date","Date","isMorning","winds","event","newDate","monthList","match","console","log","hour","Number","minute","day","monthCode","find","m","includes","month","indexOf","year","getFullYear","parseSubject","currentTarget","value","this","setState","getHours","newWinds","pattern","textArray","split","forEach","text","length","wind","height","degree","speed","push","parseBody","index","window","alert","confrimText","confirm","className","type","placeholder","onChange","e","handleChangeSubject","handleChangeSmallInput","getMonth","getDate","getMinutes","handleChangeBody","maxRows","reverse","map","i","key","style","width","margin","href","onClick","handleClickButton","React","Component","Detail","params","id","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gUAsHeA,E,kDAxGb,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,GACNC,KAAM,IAAIC,KACVC,WAAW,EACXC,MAAO,IAPe,E,gEAWNC,GAClB,IAAMC,ECzBH,SAAsBP,GAE3B,IAAMQ,EAAY,CAAC,MAAO,MAAO,MAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE7FC,EAAQT,EAAQS,MADN,+CAEd,IAAKA,EAEH,OADAC,QAAQC,IAAI,uCACL,KAET,IAAMC,EAAOC,OAAOJ,EAAM,IACpBK,EAASD,OAAOJ,EAAM,IACtBM,EAAMF,OAAOJ,EAAM,IAEnBO,EAAYR,EAAUS,MAAK,SAAAC,GAAC,OAAIlB,EAAQmB,SAASD,MACvD,GAAIF,EAAW,CACb,IAAMI,EAAQZ,EAAUa,QAAQL,GAE1BM,GADK,IAAInB,MACCoB,cAChB,OAAO,IAAIpB,KAAKmB,EAAMF,EAAOL,EAAKH,EAAME,GAG1C,OAAO,KDIWU,CAAalB,EAAMmB,cAAcC,OACjDhB,QAAQC,IAAIJ,GACRA,EACFoB,KAAKC,SAAS,CAAC5B,QAASM,EAAMmB,cAAcC,MAAOxB,KAAMK,EAASH,UAAWG,EAAQsB,WAAa,KAElGF,KAAKC,SAAS,CAAC5B,QAASM,EAAMmB,cAAcC,U,uCAI/BpB,GACf,IAAMwB,ECJH,SAAmB7B,GAA+G,IAAjG8B,EAAgG,uDAA9E,sCAQlDC,EAAY/B,EAAKgC,MAAM,cACvB5B,EAAgB,GAatB,OAXA2B,EAAUE,SAAQ,SAAAC,GAChB,IAAM1B,EAAQ0B,EAAK1B,MAAMsB,GACzB,GAAItB,GAASA,EAAM2B,QAAU,EAAG,CAC9B,IAAMC,EAAO,CACXC,OAAQzB,OAAOJ,EAAM,IACrB8B,OAAQ1B,OAAOJ,EAAM,IACrB+B,MAAO3B,OAAOJ,EAAM,KAEtBJ,EAAMoC,KAAKJ,OAGRhC,EDlBYqC,CAAUpC,EAAMmB,cAAcC,OAC/ChB,QAAQC,IAAImB,GACZH,KAAKC,SAAS,CAAC3B,KAAMK,EAAMmB,cAAcC,MAAOrB,MAAOyB,M,6CAGlCxB,EAA0CqC,M,0CAK/D,GAAIhB,KAAK5B,MAAMM,MAAM+B,QAAU,EAC7BQ,OAAOC,MAAM,4FADf,CAKA,IAAIC,EAAc,uIAClBpC,QAAQC,IAAIgB,KAAK5B,MAAMC,SACI,KAAvB2B,KAAK5B,MAAMC,UACb8C,EAAc,iHAAyBA,GAE7BF,OAAOG,QAAQD,M,+BAOnB,IAAD,OAGP,OACE,yBAAKE,UAAU,WACb,yBAAKA,UAAU,WACb,gIACA,2BAAOC,KAAK,OAAOvB,MAAOC,KAAK5B,MAAMC,QAASkD,YANzB,6CAM0DC,SAAU,SAAAC,GAAC,OAAI,EAAKC,oBAAoBD,IAAIJ,UAAU,eACrI,6BACE,2BAAOA,UAAU,cAActB,MAAOC,KAAK5B,MAAMG,KAAKqB,cAAe4B,SAAU,SAAAC,GAAC,OAAI,EAAKE,uBAAuBF,EAAG,MADrH,KAEE,2BAAOJ,UAAU,cAActB,MAAOC,KAAK5B,MAAMG,KAAKqD,WAAYJ,SAAU,SAAAC,GAAC,OAAI,EAAKE,uBAAuBF,EAAG,MAFlH,KAGE,2BAAOJ,UAAU,cAActB,MAAOC,KAAK5B,MAAMG,KAAKsD,UAAWL,SAAU,SAAAC,GAAC,OAAI,EAAKE,uBAAuBF,EAAG,MAHjH,SAIE,2BAAOJ,UAAU,cAActB,MAAOC,KAAK5B,MAAMG,KAAK2B,WAAYsB,SAAU,SAAAC,GAAC,OAAI,EAAKE,uBAAuBF,EAAG,MAJlH,KAKE,2BAAOJ,UAAU,cAActB,MAAOC,KAAK5B,MAAMG,KAAKuD,aAAcN,SAAU,SAAAC,GAAC,OAAI,EAAKE,uBAAuBF,EAAG,QAGtH,yBAAKJ,UAAU,WACb,gIACA,kBAAC,IAAD,CAAkBC,KAAK,OAAOvB,MAAOC,KAAK5B,MAAME,KAAMiD,YAhBtC,8FAgBoEC,SAAU,SAAAC,GAAO,EAAKM,iBAAiBN,IAAMJ,UAAU,aAAaW,QAAS,IACjK,yBAAKX,UAAU,aACb,+BACE,+BACE,4BACE,uCACA,0CACA,0CAIFrB,KAAK5B,MAAMM,MAAMuD,UAAUC,KAAI,SAACxB,EAAMyB,GAEpC,OADApD,QAAQC,IAAI0B,GAEV,2BAAO0B,IAAK,QAAQD,GAClB,4BACE,4BAAKzB,EAAKC,QACV,4BAAKD,EAAKE,QACV,4BAAKF,EAAKG,eAS1B,yBAAKwB,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAClC,uBAAGC,KAAK,IAAIC,QAAS,kBAAM,EAAKC,qBAAqBrB,UAAU,cAA/D,e,GAhGYsB,IAAMC,WENtBC,G,MAA+C,SAAC,GAAD,IAAG/D,EAAH,EAAGA,MAAH,OACnD,2CAAOA,EAAMgE,OAAOC,MA4BPC,MAzBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK3B,UAAU,OACf,4BAAQA,UAAU,cAChB,oDAIF,yBAAKA,UAAU,gBAET,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,IAAIC,UAAWjF,IAEjC,kBAAC,IAAD,CAAOgF,KAAK,cAAcC,UAAWN,SCd/BO,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASxE,MACvB,2DCZNyE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpF,QAAQoF,MAAMA,EAAMC,c","file":"static/js/main.706b4c8e.chunk.js","sourcesContent":["import React from \"react\";\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { parseSubject, parseBody, Wind } from '../utils/parser'\n\ninterface Props {}\ninterface State {\n  subject: string\n  body: string\n  date: Date\n  isMorning: boolean\n  winds: Wind[]\n}\n\nclass TopPage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      subject: \"\",\n      body: \"\",\n      date: new Date(),\n      isMorning: true,\n      winds: []\n    }\n  }\n\n  handleChangeSubject(event: React.FormEvent<HTMLInputElement>) {\n    const newDate = parseSubject(event.currentTarget.value)\n    console.log(newDate)\n    if (newDate) {\n      this.setState({subject: event.currentTarget.value, date: newDate, isMorning: newDate.getHours() < 12 })\n    } else {\n      this.setState({subject: event.currentTarget.value })\n    }\n  }\n\n  handleChangeBody(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    const newWinds = parseBody(event.currentTarget.value)\n    console.log(newWinds)\n    this.setState({body: event.currentTarget.value, winds: newWinds});\n  }\n\n  handleChangeSmallInput(event: React.FormEvent<HTMLInputElement>, index: number) {\n\n  }\n\n  handleClickButton() {\n    if (this.state.winds.length <= 0) {\n      window.alert('パイバルデータが未入力です。')\n      return\n    }\n\n    let confrimText = \"パイバルデータを送信します。よろしいですか？\"\n    console.log(this.state.subject)\n    if (this.state.subject === \"\") {\n      confrimText = \"件名が未入力です。\\n現在時刻を使用して\" + confrimText\n    }\n    const res = window.confirm(confrimText)\n\n    if (res) {\n\n    }\n  }\n   \n  render() {\n    const subjectPlaceholder = \"ex) Pibal Data released on 05:55 19th Oct.\"\n    const bodyPlaceholder=\"ex)\\nAlt(m) Deg(from) Spd(kt)\\n100m 322° 5.5kt\\n200m 334° 13.2kt\\n300m 341° 10.0kt\"\n    return (\n      <div className='flexbox'>\n        <div className='wrapbox'>\n          <p>メールの件名を貼り付けてください:</p>\n          <input type=\"text\" value={this.state.subject} placeholder={subjectPlaceholder} onChange={e => this.handleChangeSubject(e)} className='mail-input' />\n          <div>\n            <input className='small-input' value={this.state.date.getFullYear()} onChange={e => this.handleChangeSmallInput(e, 0)}/> / \n            <input className='small-input' value={this.state.date.getMonth()} onChange={e => this.handleChangeSmallInput(e, 1)}/> / \n            <input className='small-input' value={this.state.date.getDate()} onChange={e => this.handleChangeSmallInput(e, 2)}/>　\n            <input className='small-input' value={this.state.date.getHours()} onChange={e => this.handleChangeSmallInput(e, 3)}/> : \n            <input className='small-input' value={this.state.date.getMinutes()} onChange={e => this.handleChangeSmallInput(e, 4)}/>\n          </div>\n        </div>\n        <div className='wrapbox'>\n          <p>メールの本文を貼り付けてください:</p>\n          <TextareaAutosize type=\"text\" value={this.state.body} placeholder={bodyPlaceholder} onChange={e => { this.handleChangeBody(e) }} className='mail-input' maxRows={5}/>\n          <div className=\"table-dix\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Alt.(m)</th>\n                  <th>Deg.(°)</th>\n                  <th>Spd.(kt)</th>\n                </tr>\n              </thead>\n              {\n                this.state.winds.reverse().map((wind, i) => {\n                  console.log(wind)\n                  return (\n                    <tbody key={'wind-'+i}>\n                      <tr>\n                        <td>{wind.height}</td>\n                        <td>{wind.degree}</td>\n                        <td>{wind.speed}</td>\n                      </tr>\n                    </tbody>\n                  )\n                })\n              }\n            </table>\n          </div>\n        </div>\n        <div style={{width: '100%', margin: '20px'}}>\n          <a href=\"#\" onClick={() => this.handleClickButton()} className=\"btn-square\">\n            Send!\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TopPage","// parser.ts\nexport function parseSubject(subject: string): Date | null {\n  // 件名からparse\n  const monthList = ['Jan', 'Feb', 'Mar' , 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  let pattern = /(\\d{1,2}):(\\d{1,2}).*(\\d{1,2})(st|nd|rd|th)/\n  let match = subject.match(pattern)\n  if (!match) {\n    console.log('this does not include time and date')\n    return null\n  }\n  const hour = Number(match[1])\n  const minute = Number(match[2])\n  const day = Number(match[3])\n\n  const monthCode = monthList.find(m => subject.includes(m))\n  if (monthCode) {\n    const month = monthList.indexOf(monthCode)\n    const dt = new Date();\n    const year = dt.getFullYear();\n    return new Date(year, month, day, hour, minute)\n  }\n\n  return null\n}\n\n// Interface of wind\nexport interface Wind {\n  height: number\n  degree: number\n  speed: number\n}\n\nexport function parseBody(body: string, pattern: RegExp = /(\\d{3,4})m (\\d{1,3})° (\\d+.\\d)kt/, matchOrder: number[] = [1, 2, 3]): Wind[] {\n  /**\n   * body: メールの本文\n   * pattern: 正規表現\n   * matchOrder: patternによって得られたmatchに対して[height, degree, speed]がどのように並んでいるかを示す。\n   *             もしも[height, speed, degree]の順で並んでいる場合、[0, 2, 1]を渡す\n   */\n\n  const textArray = body.split(/\\r\\n|\\r|\\n/)\n  const winds: Wind[] = []\n\n  textArray.forEach(text => {\n    const match = text.match(pattern)\n    if (match && match.length >= 4) {\n      const wind = {\n        height: Number(match[1]),\n        degree: Number(match[2]),\n        speed: Number(match[3])\n      }\n      winds.push(wind)\n    }\n  })\n  return winds\n}","import React, { FC } from 'react';\nimport logo from './logo.svg';\nimport { HashRouter, Switch, Route, match } from 'react-router-dom';\nimport TopPage from './components/TopPage'\nimport './App.scss';\n\n\nconst Detail: FC<{ match: match<{ id: string }> }> = ({ match }) => (\n  <>id: {match.params.id}</>\n);\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          PibalViewer Uploader\n        </p>\n      </header>\n      <div className=\"_RoutingArea\">\n            {/* Switchで囲んで、Routeで設定したcomponentが呼ばれるように設定 */}\n            <Switch>\n              {/* exactにしてrootにアクセスされたときはだけ「Top!」と表示されるように設定 */}\n              <Route exact path=\"/\" component={TopPage} />\n              {/* exactではないので、「detail/hoge」でも以下のcomponentは呼ばれる */}\n              <Route path=\"/detail/:id\" component={Detail} />\n            </Switch>\n          </div>\n    </div>\n    </HashRouter>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}